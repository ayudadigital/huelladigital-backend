{"version":3,"sources":["components/atoms/Label/Label.tsx","components/atoms/InputFieldForm/InputFieldForm.tsx","components/molecules/FieldForm/FieldForm.tsx","components/atoms/SubmitButton/SubmitButton.tsx","utils/routes.ts","components/atoms/LinkText/LinkText.tsx","components/organisms/Forms/FormRegisterVolunteer/FormRegisterVolunteer.tsx","pages/VolunteerRegister/VolunteerRegister.tsx","components/organisms/Forms/FormLoginVolunteer/FormLoginVolunteer.tsx","pages/VolunteerLogin/VolunteerLogin.tsx","components/atoms/LinkButton/LinkButton.tsx","components/templates/WrapperPages/WrapperPages.tsx","pages/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Label","text","className","displayName","InputFieldForm","type","name","value","onChange","aria-label","FieldForm","title","SubmitButton","ROUTE","register","login","LinkText","to","FormRegisterVolunteer","useState","email","password","passwordRepeated","data","setData","method","onSubmit","event","preventDefault","exampleJsonToApi","fetch","headers","body","JSON","stringify","console","log","target","VolunteerRegister","FormLoginVolunteer","id","VolunteerLogin","LinkButton","path","WrapperPages","children","Home","App","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e040e035.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport './Label.scss';\r\nimport { LabelProps } from './types';\r\n\r\n\r\nexport const Label: React.FC<LabelProps> = ({text}) => (\r\n  <label className=\"Label\">{text}</label>\r\n);\r\n\r\n\r\n\r\n\r\nLabel.displayName = 'Label';\r\n","import * as React from 'react';\r\nimport './styles.scss';\r\nimport { InputFieldFormProps } from './types';\r\n\r\nexport const InputFieldForm: React.FC<InputFieldFormProps> = ({\r\n  type,\r\n  name,\r\n  value,\r\n  onChange,\r\n}) => {\r\n  const checkPassword = (pass: String, passrepeated: String) => {\r\n    if (checkLength(pass)) {\r\n      console.log('añadir color verde');\r\n    } else {\r\n      console.log('añadir color rojo');\r\n    }\r\n  };\r\n\r\n  const checkLength = (password: String) => {\r\n    const minLenght: number = 5;\r\n    let comprobar: boolean = false;\r\n    if (password.length >= minLenght) comprobar = true;\r\n    return comprobar;\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"InputFieldForm\"\r\n      aria-label={'input-form'}\r\n      type={type}\r\n      name={name}\r\n      value={value}\r\n      onChange={onChange}\r\n    />\r\n  );\r\n};\r\n\r\nInputFieldForm.displayName = 'InputFieldForm';\r\n","import React from 'react';\r\nimport './styles.scss';\r\nimport { FieldFormProps } from './types';\r\nimport { Label } from '../../atoms/Label';\r\nimport { InputFieldForm } from '../../atoms/InputFieldForm';\r\n\r\nexport const FieldForm: React.FC<FieldFormProps> = ({\r\n  title = '',\r\n  type = 'text',\r\n  name = '',\r\n  value,\r\n  onChange,\r\n}) => {\r\n  return (\r\n    <div className=\"FieldForm\">\r\n      <Label text={title} />\r\n      <InputFieldForm type={type} name={name} value={value} onChange={onChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nFieldForm.displayName = 'FieldForm';\r\n","import * as React from 'react';\r\nimport './styles.scss';\r\nimport { SubmitButtonProps } from './types';\r\n\r\nexport const SubmitButton: React.FC<SubmitButtonProps> = ({text='',}) => (\r\n  <button className=\"SubmitButton\" type={'submit'}>\r\n    {text}\r\n  </button>\r\n);\r\n\r\nSubmitButton.displayName = 'SubmitButton';\r\n","type typeRoute = {\r\n  home: string;\r\n  volunteer: { login: string; register: string };\r\n  organization: { login: string; register: string };\r\n};\r\n\r\nexport const ROUTE: typeRoute = {\r\n  home: '/',\r\n  volunteer: {\r\n    register: '/volunteer-register',\r\n    login: '/volunteer-login',\r\n  },\r\n  organization: {\r\n    register: '/organization-register',\r\n    login: '/organization-login',\r\n  },\r\n};\r\n","import * as React from 'react';\r\nimport './styles.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { LinkTextProps } from './types';\r\n\r\nexport const LinkText: React.FC<LinkTextProps> = ({to, text}) => (\r\n  <Link className=\"LinkText\" to={to}>{text}</Link>\r\n);\r\n\r\nLinkText.displayName = 'LinkText';\r\n","import React, { useState } from 'react';\r\nimport { FieldForm } from '../../../molecules/FieldForm';\r\nimport { SubmitButton } from '../../../atoms/SubmitButton';\r\nimport { ROUTE } from '../../../../utils/routes';\r\nimport { LinkText } from '../../../atoms/LinkText';\r\nimport '../styles.scss';\r\n\r\ninterface dataInterface {\r\n  email: string | React.ChangeEvent<HTMLInputElement>;\r\n  password: string | React.ChangeEvent<HTMLInputElement>;\r\n  passwordRepeated: string | React.ChangeEvent<HTMLInputElement>;\r\n}\r\n\r\nexport const FormRegisterVolunteer: React.FC<{}> = () => {\r\n  const [data, setData] = useState<dataInterface>({\r\n    email: '',\r\n    password: '',\r\n    passwordRepeated: '',\r\n  });\r\n\r\n  const handleSubmit = (event: any) => {\r\n    event.preventDefault();\r\n    const exampleJsonToApi = {\r\n      email: data.email,\r\n      password: data.password,\r\n    };\r\n\r\n    const URL = 'http://localhost:8080/api/v1/volunteers';\r\n    const TESTINGURL = 'https://webhook.site/63587131-e3bb-487e-857c-6fac629f0894';\r\n    fetch(URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ email: 'david@gmail.com', password: '1234545' }),\r\n    });\r\n    console.log(exampleJsonToApi);\r\n  };\r\n\r\n  return (\r\n    <form className=\"ContainerForm\" method=\"POST\" onSubmit={handleSubmit}>\r\n      <h1>Registro de voluntario</h1>\r\n      <FieldForm\r\n        title={'Email'}\r\n        type={'email'}\r\n        name={'email'}\r\n        onChange={(event) => setData({ ...data, email: event.target.value })}\r\n      />\r\n      <FieldForm\r\n        title={'Contraseña'}\r\n        type={'password'}\r\n        name={'password'}\r\n        onChange={(event) => setData({ ...data, password: event.target.value })}\r\n      />\r\n      <FieldForm\r\n        title={'Repetir contraseña'}\r\n        type={'password'}\r\n        name={'repeatedPassword'}\r\n        onChange={(event) => setData({ ...data, passwordRepeated: event.target.value })}\r\n      />\r\n      <SubmitButton text={'Acceder'} />\r\n      <p>\r\n        ¿Ya tiene cuenta? <LinkText to={ROUTE.volunteer.login} text={'Iniciar sesión'} />\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n\r\nFormRegisterVolunteer.displayName = 'FormRegisterVolunteer';\r\n","import React from 'react';\r\nimport './styles.scss';\r\nimport { FormRegisterVolunteer } from '../../components/organisms/Forms/FormRegisterVolunteer';\r\nimport { Link } from 'react-router-dom';\r\nimport { ROUTE } from '../../utils/routes';\r\n\r\nconst VolunteerRegister: React.FC = () => {\r\n  return (\r\n    <div className=\"VolunteerRegister\">\r\n      <div className={'header'}>\r\n        <Link to={ROUTE.home}> {'<- Inicio'}</Link>\r\n        <Link to={ROUTE.volunteer.login}> {'Acceder ->'}</Link>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"container\">\r\n        <FormRegisterVolunteer/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VolunteerRegister;\r\n","import React from 'react';\r\nimport '../styles.scss';\r\nimport { FieldForm } from '../../../molecules/FieldForm';\r\nimport { SubmitButton } from '../../../atoms/SubmitButton';\r\nimport { LinkText } from '../../../atoms/LinkText/LinkText';\r\nimport { ROUTE } from '../../../../utils/routes';\r\n\r\nexport const FormLoginVolunteer: React.FC<{}> = () => {\r\n  return (\r\n    <form className=\"ContainerForm\" method=\"POST\" id=\"form\">\r\n      <h1>Acceso de voluntario</h1>\r\n      <FieldForm title={'Email'} type={'email'} name={'email'} />\r\n      <FieldForm title={'Contraseña'} type={'password'} name={'password'} />\r\n      <SubmitButton text={'Acceder'} />\r\n      <p>\r\n        ¿No tiene una cuenta?\r\n        <LinkText to={ROUTE.volunteer.register} text={'Registrate'} />\r\n      </p>\r\n    </form>\r\n  );\r\n};\r\n\r\nFormLoginVolunteer.displayName = 'FormLoginVolunteer';\r\n","import React from 'react';\r\nimport './styles.scss';\r\nimport { FormLoginVolunteer } from '../../components/organisms/Forms/FormLoginVolunteer';\r\nimport { ROUTE } from '../../utils/routes';\r\nimport { LinkText } from '../../components/atoms/LinkText';\r\n\r\nconst VolunteerLogin: React.FC = () => {\r\n  return (\r\n    <div className=\"VolunteerLogin\">\r\n      <div className={'header'}>\r\n        <LinkText to={ROUTE.home} text={'Inicio'}/>\r\n        <LinkText to={ROUTE.volunteer.register} text={'Registrarse'}/>\r\n      </div>\r\n\r\n      <hr/>\r\n\r\n      <div className=\"container\">\r\n        <FormLoginVolunteer/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VolunteerLogin;\r\n","import { Link } from 'react-router-dom';\r\nimport React from 'react';\r\nimport './styles.scss';\r\n\r\ninterface LinkButtonProps {\r\n  path: string;\r\n  text: string;\r\n}\r\n\r\nexport const LinkButton: React.FC<LinkButtonProps> = ({path, text='boton'}) => {\r\n  return (\r\n    <Link to={path}>\r\n      <button className={'LinkButton'}>{text}</button>\r\n    </Link>\r\n  );\r\n};\r\n","import * as React from 'react';\r\nimport './WrapperPages.scss';\r\n\r\nexport const WrapperPages: React.FC<{}> = ({children}) => (\r\n  <div className=\"WrapperPages\">\r\n    {children}\r\n  </div>\r\n);\r\n\r\nWrapperPages.displayName = 'WrapperPages';\r\n","import React from 'react';\r\nimport './styles.scss';\r\nimport { LinkButton } from '../../components/atoms/LinkButton/LinkButton';\r\nimport { ROUTE } from '../../utils/routes';\r\nimport { WrapperPages } from '../../components/templates/WrapperPages';\r\n\r\n\r\nexport const Home: React.FC<{}> = () => {\r\n  return (\r\n    <WrapperPages>\r\n      <header/>\r\n      <section className={'Home'}>\r\n        <LinkButton path={ROUTE.volunteer.register} text={'Registrar voluntario'}/>\r\n        <LinkButton path={ROUTE.volunteer.login} text={'Acceso voluntario'}/>\r\n      </section>\r\n      <footer/>\r\n    </WrapperPages>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport './styles/scss/index.scss';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport VolunteerRegister from './pages/VolunteerRegister/VolunteerRegister';\r\nimport VolunteerLogin from './pages/VolunteerLogin/VolunteerLogin';\r\nimport { Home } from './pages/Home/Home';\r\nimport { ROUTE } from './utils/routes';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path={ROUTE.home}>\r\n            <Home />\r\n          </Route>\r\n          <Route exact path={ROUTE.volunteer.login}>\r\n            <VolunteerLogin />\r\n          </Route>\r\n          <Route path={ROUTE.volunteer.register}>\r\n            <VolunteerRegister />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport '../node_modules/bulma/css/bulma.min.css';\r\nimport './styles/scss/index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}